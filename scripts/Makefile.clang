# SPDX-License-Identifier: GPL-2.0
# Clang-specific build setup

# Architecture -> target triple fallback
CLANG_TARGET_FLAGS_arm      := arm-linux-gnueabi
CLANG_TARGET_FLAGS_arm64    := aarch64-linux-gnu
CLANG_TARGET_FLAGS_hexagon  := hexagon-linux-musl
CLANG_TARGET_FLAGS_m68k     := m68k-linux-gnu
CLANG_TARGET_FLAGS_mips     := mipsel-linux-gnu
CLANG_TARGET_FLAGS_powerpc  := powerpc64le-linux-gnu
CLANG_TARGET_FLAGS_riscv    := riscv64-linux-gnu
CLANG_TARGET_FLAGS_s390     := s390x-linux-gnu
CLANG_TARGET_FLAGS_x86      := x86_64-linux-gnu
CLANG_TARGET_FLAGS          := $(CLANG_TARGET_FLAGS_$(SRCARCH))

# Check if CC is Clang
ifneq ($(shell $(CC) --version 2>&1 | head -n 1 | grep clang),)

# Use CROSS_COMPILE if set
ifneq ($(CROSS_COMPILE),)
CLANG_FLAGS       += --target=$(notdir $(CROSS_COMPILE:%-=%))
GCC_TOOLCHAIN_DIR := $(dir $(shell which $(CROSS_COMPILE)elfedit))
CLANG_FLAGS       += --prefix=$(GCC_TOOLCHAIN_DIR)$(notdir $(CROSS_COMPILE))
GCC_TOOLCHAIN     := $(realpath $(GCC_TOOLCHAIN_DIR)/..)

# Fallback to CLANG_TARGET_FLAGS if CROSS_COMPILE is not set
else ifneq ($(CLANG_TARGET_FLAGS),)
CLANG_FLAGS       += --target=$(CLANG_TARGET_FLAGS)

else
$(error Specify CROSS_COMPILE or ensure CLANG_TARGET_FLAGS_$(SRCARCH) is set)
endif

# Add --gcc-toolchain if available
ifneq ($(GCC_TOOLCHAIN),)
CLANG_FLAGS       += --gcc-toolchain=$(GCC_TOOLCHAIN)
endif

# LLVM integrated assembler
ifeq ($(LLVM_IAS),1)
CLANG_FLAGS       += -fintegrated-as
else
CLANG_FLAGS       += -fno-integrated-as
endif

CLANG_FLAGS       += -Werror=unknown-warning-option

# Apply to build flags
KBUILD_CPPFLAGS   += $(CLANG_FLAGS)
KBUILD_CFLAGS     += $(CLANG_FLAGS)
KBUILD_AFLAGS     += $(CLANG_FLAGS)
export CLANG_FLAGS

endif
